*What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository (with git "init") you can be offline and you are basically starting a git pointer to show that you want the history of the repository ( the folder which has git abilities and obvi its files) to be tracked. You need to do it because otherwise your files will never be tracked by git.
	
*How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is the place where you "prepare" the things you want to commit to your git history. Thus you can add (with "add") or remove (with "reset") files from it, making sure you have a lot of control over your commits. The working directory is simply the place were you currently are. You have your files stored and are playing with them in the Working Directory. The Repository is the conjunction of files and folders which make up your git environment.
	
*How can you use the staging area to make sure you have one commit per logical change?

	Well first of all the staging area helps to keep track of the things that are about to be committed. By using 
	'git diff --staged' one can remember what has been already committed and using 'git diff' what has been changed and staged already can also be seen. Combining these 2 tools we can make sure we always have one commit per logical change!
	
*What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	If I need to make some feature change to an already working copy of the files I have checking-out between the newest version and the 'steady' one would create a fussy history of the repository. Branches help in that they become their own branch (lol) and separate their history from the masters one.
	
*How do the diagrams help you visualize the branch structure?

	Diagrams are really useful for visualizing the timeline of commits and branch creation periods. They help you figure out in an easy-to-track manner which features/changes have been implemented and allow you to follow unreachable commits which logs would not be able to show!!
	
*What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When we merge 2+ branches together we essentially create a new commit with the history (git log) and the changes (commits) of both the branches. It is obviously represented in the diagram as a conjunction of two tree branches as the two branches are eniologically connecting into one.
	
*What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging helps us compare and add code to a single file in a manner that doesn't tire us and is time-effective. When two files bond mutually and changes are saved it's actually pretty helpful to use automatic merging. However, there are cases in which only manual merging can be used to decide on the difference betwixt the code that we want to change and save and the one we want to discard or didn't make effective changes on. This is where the cons of manual merging come into play making it the only way we could save a file without corrupting it.